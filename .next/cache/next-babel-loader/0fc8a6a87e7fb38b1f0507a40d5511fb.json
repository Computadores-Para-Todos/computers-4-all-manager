{"ast":null,"code":"import Sequelize from 'sequelize'; // models\n\nimport User from './UserModel';\nimport Status from './StatusModel';\nimport Donator from './DonatorModel';\nimport Device from './DeviceModel';\nimport Activity from './ActivityModel';\nimport Comment from './CommentModel';\nimport Donation from './DonationModel';\nconst {\n  DB_USERNAME,\n  DB_PASSWORD,\n  DATABASE,\n  DB_HOST,\n  DB_TIMEZONE,\n  NODE_ENV\n} = process.env;\nconst config = {\n  dialect: 'mysql',\n  dialectOptions: {\n    timezone: DB_TIMEZONE\n  },\n  host: DB_HOST,\n  operatorsAliases: 0,\n  logging: false,\n  define: {\n    timestamp: true,\n    underscored: true,\n    underscoredAll: true\n  }\n};\n\nif (NODE_ENV === 'test') {\n  config.logging = false;\n  config.storage = './__tests__/database.sqlite';\n  config.dialect = 'sqlite';\n}\n\nexport const sequelize = new Sequelize(DATABASE, DB_USERNAME, DB_PASSWORD, config); // Inicializa modelos - INSERIR NOVOS MODELOS AQUI\n\nconst models = [User, Status, Donator, Device, Activity, Comment, Donation];\nmodels.forEach(model => model.init(sequelize)); // Executa método associate, se existir, para criar relacionamentos\n\nmodels.filter(model => typeof model.associate === 'function').forEach(model => model.associate());\nsequelize.sync();\n/**\n * Connect to the database\n * @returns {Promise} connection\n */\n\nexport function connect() {\n  return sequelize.authenticate().then(() => console.log('Connection has been established successfully.')).catch(err => console.log('Unable to connect to the database:', err));\n}\nconnect(); // Export Models\n\nexport { User, Status, Donator, Device, Activity, Comment, Donation };","map":{"version":3,"sources":["/home/vinicius/code/computers-4-all-manager/api/src/models/index.js"],"names":["Sequelize","User","Status","Donator","Device","Activity","Comment","Donation","DB_USERNAME","DB_PASSWORD","DATABASE","DB_HOST","DB_TIMEZONE","NODE_ENV","process","env","config","dialect","dialectOptions","timezone","host","operatorsAliases","logging","define","timestamp","underscored","underscoredAll","storage","sequelize","models","forEach","model","init","filter","associate","sync","connect","authenticate","then","console","log","catch","err"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB,C,CACA;;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAEA,MAAM;AACJC,EAAAA,WADI;AAEJC,EAAAA,WAFI;AAGJC,EAAAA,QAHI;AAIJC,EAAAA,OAJI;AAKJC,EAAAA,WALI;AAMJC,EAAAA;AANI,IAOFC,OAAO,CAACC,GAPZ;AAQA,MAAMC,MAAM,GAAG;AACbC,EAAAA,OAAO,EAAE,OADI;AAEbC,EAAAA,cAAc,EAAE;AACdC,IAAAA,QAAQ,EAAEP;AADI,GAFH;AAKbQ,EAAAA,IAAI,EAAET,OALO;AAMbU,EAAAA,gBAAgB,EAAE,CANL;AAObC,EAAAA,OAAO,EAAC,KAPK;AAQbC,EAAAA,MAAM,EAAE;AACNC,IAAAA,SAAS,EAAE,IADL;AAENC,IAAAA,WAAW,EAAE,IAFP;AAGNC,IAAAA,cAAc,EAAE;AAHV;AARK,CAAf;;AAeA,IAAIb,QAAQ,KAAK,MAAjB,EAAyB;AACvBG,EAAAA,MAAM,CAACM,OAAP,GAAiB,KAAjB;AACAN,EAAAA,MAAM,CAACW,OAAP,GAAiB,6BAAjB;AACAX,EAAAA,MAAM,CAACC,OAAP,GAAiB,QAAjB;AACD;;AAED,OAAO,MAAMW,SAAS,GAAG,IAAI5B,SAAJ,CAAcU,QAAd,EAAwBF,WAAxB,EAAqCC,WAArC,EAAkDO,MAAlD,CAAlB,C,CAEP;;AACA,MAAMa,MAAM,GAAG,CAAC5B,IAAD,EAAOC,MAAP,EAAeC,OAAf,EAAwBC,MAAxB,EAAgCC,QAAhC,EAA0CC,OAA1C,EAAmDC,QAAnD,CAAf;AACAsB,MAAM,CAACC,OAAP,CAAeC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWJ,SAAX,CAAxB,E,CACA;;AACAC,MAAM,CACHI,MADH,CACUF,KAAK,IAAI,OAAOA,KAAK,CAACG,SAAb,KAA2B,UAD9C,EAEGJ,OAFH,CAEWC,KAAK,IAAIA,KAAK,CAACG,SAAN,EAFpB;AAIAN,SAAS,CAACO,IAAV;AAEA;;;;;AAIA,OAAO,SAASC,OAAT,GAAmB;AACxB,SAAOR,SAAS,CACbS,YADI,GAEJC,IAFI,CAEC,MAAMC,OAAO,CAACC,GAAR,CAAY,+CAAZ,CAFP,EAGJC,KAHI,CAGEC,GAAG,IAAIH,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAkDE,GAAlD,CAHT,CAAP;AAID;AACDN,OAAO,G,CAEP;;AACA,SAASnC,IAAT,EAAeC,MAAf,EAAuBC,OAAvB,EAAgCC,MAAhC,EAAwCC,QAAxC,EAAkDC,OAAlD,EAA2DC,QAA3D","sourcesContent":["import Sequelize from 'sequelize';\n// models\nimport User from './UserModel';\nimport Status from './StatusModel';\nimport Donator from './DonatorModel';\nimport Device from './DeviceModel';\nimport Activity from './ActivityModel';\nimport Comment from './CommentModel';\nimport Donation from './DonationModel';\n\nconst {\n  DB_USERNAME,\n  DB_PASSWORD,\n  DATABASE,\n  DB_HOST,\n  DB_TIMEZONE,\n  NODE_ENV\n} = process.env;\nconst config = {\n  dialect: 'mysql',\n  dialectOptions: {\n    timezone: DB_TIMEZONE\n  },\n  host: DB_HOST,\n  operatorsAliases: 0,\n  logging:false,\n  define: {\n    timestamp: true,\n    underscored: true,\n    underscoredAll: true\n  }\n};\n\nif (NODE_ENV === 'test') {\n  config.logging = false;\n  config.storage = './__tests__/database.sqlite';\n  config.dialect = 'sqlite';\n}\n\nexport const sequelize = new Sequelize(DATABASE, DB_USERNAME, DB_PASSWORD, config);\n\n// Inicializa modelos - INSERIR NOVOS MODELOS AQUI\nconst models = [User, Status, Donator, Device, Activity, Comment, Donation];\nmodels.forEach(model => model.init(sequelize));\n// Executa método associate, se existir, para criar relacionamentos\nmodels\n  .filter(model => typeof model.associate === 'function')\n  .forEach(model => model.associate());\n\nsequelize.sync();\n\n/**\n * Connect to the database\n * @returns {Promise} connection\n */\nexport function connect() {\n  return sequelize\n    .authenticate()\n    .then(() => console.log('Connection has been established successfully.'))\n    .catch(err => console.log('Unable to connect to the database:', err));\n}\nconnect();\n\n// Export Models\nexport { User, Status, Donator, Device, Activity, Comment, Donation };\n"]},"metadata":{},"sourceType":"module"}