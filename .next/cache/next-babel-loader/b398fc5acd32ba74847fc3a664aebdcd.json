{"ast":null,"code":"import { Model, Op, STRING, VIRTUAL, DATEONLY, DATE, ENUM } from 'sequelize';\nimport { encrypt } from '../utils';\n/**\n * Model de usuário\n * @exports\n * @class UserModel\n * @augments {Model}\n * @see https://codewithhugo.com/using-es6-classes-for-sequelize-4-models/\n */\n\nexport default class User extends Model {\n  /**\n   * Atualiza a data do último acesso\n   * @static\n   * @param {number} id ID do usuário\n   * @returns {Promise} query\n   * @memberof UserModel\n   */\n  static async updateLastAccess(id) {\n    // data de hoje, às 0H\n    const now = new Date();\n    now.setHours(0);\n    now.setMinutes(0);\n    now.setSeconds(0);\n    now.setMilliseconds(0);\n    console.log('lastaccess');\n    return await this.update({\n      lastaccess: new Date()\n    }, {\n      where: {\n        id,\n        [Op.or]: [{\n          lastaccess: {\n            [Op.lt]: now\n          }\n        }, {\n          lastaccess: {\n            [Op.eq]: null\n          }\n        }]\n      }\n    });\n  } // Cria instância do model\n\n\n  static init(sequelize) {\n    super.init({\n      thumb: STRING,\n      name: STRING,\n      document: STRING,\n      gender: ENUM('male', 'female'),\n      birthday: DATEONLY,\n      phone: STRING,\n      email: {\n        type: STRING,\n        allowNull: false,\n        unique: true,\n        validate: {\n          isEmail: true\n        }\n      },\n      password: VIRTUAL,\n      password_hash: STRING,\n      lastaccess: DATE,\n      role: {\n        type: STRING,\n        allowNull: false\n      },\n      status: {\n        type: STRING,\n        defaultValue: 'active'\n      }\n    }, {\n      sequelize\n    });\n    this.addHook('beforeSave', user => {\n      if (user.password) {\n        user.password_hash = encrypt(user.password);\n      }\n    });\n    return this;\n  }\n\n}","map":{"version":3,"sources":["/home/vinicius/code/computers-4-all-manager/api/src/models/UserModel.js"],"names":["Model","Op","STRING","VIRTUAL","DATEONLY","DATE","ENUM","encrypt","User","updateLastAccess","id","now","Date","setHours","setMinutes","setSeconds","setMilliseconds","console","log","update","lastaccess","where","or","lt","eq","init","sequelize","thumb","name","document","gender","birthday","phone","email","type","allowNull","unique","validate","isEmail","password","password_hash","role","status","defaultValue","addHook","user"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,EAAhB,EAAoBC,MAApB,EAA4BC,OAA5B,EAAqCC,QAArC,EAA+CC,IAA/C,EAAqDC,IAArD,QAAiE,WAAjE;AACA,SAASC,OAAT,QAAwB,UAAxB;AAEA;;;;;;;;AAOA,eAAe,MAAMC,IAAN,SAAmBR,KAAnB,CAAyB;AACtC;;;;;;;AAOA,eAAaS,gBAAb,CAA8BC,EAA9B,EAAkC;AAChC;AACA,UAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AACAD,IAAAA,GAAG,CAACE,QAAJ,CAAa,CAAb;AACAF,IAAAA,GAAG,CAACG,UAAJ,CAAe,CAAf;AACAH,IAAAA,GAAG,CAACI,UAAJ,CAAe,CAAf;AACAJ,IAAAA,GAAG,CAACK,eAAJ,CAAoB,CAApB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,WAAO,MAAM,KAAKC,MAAL,CACX;AAAEC,MAAAA,UAAU,EAAE,IAAIR,IAAJ;AAAd,KADW,EAEX;AACES,MAAAA,KAAK,EAAE;AACLX,QAAAA,EADK;AAEL,SAACT,EAAE,CAACqB,EAAJ,GAAS,CACP;AAAEF,UAAAA,UAAU,EAAE;AAAE,aAACnB,EAAE,CAACsB,EAAJ,GAASZ;AAAX;AAAd,SADO,EAEP;AAAES,UAAAA,UAAU,EAAE;AAAE,aAACnB,EAAE,CAACuB,EAAJ,GAAS;AAAX;AAAd,SAFO;AAFJ;AADT,KAFW,CAAb;AAYD,GA7BqC,CA+BtC;;;AACA,SAAOC,IAAP,CAAYC,SAAZ,EAAuB;AACrB,UAAMD,IAAN,CACE;AACEE,MAAAA,KAAK,EAAEzB,MADT;AAEE0B,MAAAA,IAAI,EAAE1B,MAFR;AAGE2B,MAAAA,QAAQ,EAAE3B,MAHZ;AAIE4B,MAAAA,MAAM,EAAExB,IAAI,CAAC,MAAD,EAAS,QAAT,CAJd;AAKEyB,MAAAA,QAAQ,EAAE3B,QALZ;AAME4B,MAAAA,KAAK,EAAE9B,MANT;AAOE+B,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAEhC,MADD;AAELiC,QAAAA,SAAS,EAAE,KAFN;AAGLC,QAAAA,MAAM,EAAE,IAHH;AAILC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,OAAO,EAAE;AADD;AAJL,OAPT;AAeEC,MAAAA,QAAQ,EAAEpC,OAfZ;AAgBEqC,MAAAA,aAAa,EAAEtC,MAhBjB;AAiBEkB,MAAAA,UAAU,EAAEf,IAjBd;AAkBEoC,MAAAA,IAAI,EAAE;AACJP,QAAAA,IAAI,EAAEhC,MADF;AAEJiC,QAAAA,SAAS,EAAE;AAFP,OAlBR;AAsBEO,MAAAA,MAAM,EAAE;AACNR,QAAAA,IAAI,EAAEhC,MADA;AAENyC,QAAAA,YAAY,EAAE;AAFR;AAtBV,KADF,EA4BE;AAAEjB,MAAAA;AAAF,KA5BF;AA+BA,SAAKkB,OAAL,CAAa,YAAb,EAA2BC,IAAI,IAAI;AACjC,UAAIA,IAAI,CAACN,QAAT,EAAmB;AACjBM,QAAAA,IAAI,CAACL,aAAL,GAAqBjC,OAAO,CAACsC,IAAI,CAACN,QAAN,CAA5B;AACD;AACF,KAJD;AAMA,WAAO,IAAP;AACD;;AAvEqC","sourcesContent":["import { Model, Op, STRING, VIRTUAL, DATEONLY, DATE, ENUM } from 'sequelize';\nimport { encrypt } from '../utils';\n\n/**\n * Model de usuário\n * @exports\n * @class UserModel\n * @augments {Model}\n * @see https://codewithhugo.com/using-es6-classes-for-sequelize-4-models/\n */\nexport default class User extends Model {\n  /**\n   * Atualiza a data do último acesso\n   * @static\n   * @param {number} id ID do usuário\n   * @returns {Promise} query\n   * @memberof UserModel\n   */\n  static async updateLastAccess(id) {\n    // data de hoje, às 0H\n    const now = new Date();\n    now.setHours(0);\n    now.setMinutes(0);\n    now.setSeconds(0);\n    now.setMilliseconds(0);\n\n    console.log('lastaccess');\n    return await this.update(\n      { lastaccess: new Date() },\n      {\n        where: {\n          id,\n          [Op.or]: [\n            { lastaccess: { [Op.lt]: now } },\n            { lastaccess: { [Op.eq]: null } }\n          ]\n        }\n      }\n    );\n  }\n\n  // Cria instância do model\n  static init(sequelize) {\n    super.init(\n      {\n        thumb: STRING,\n        name: STRING,\n        document: STRING,\n        gender: ENUM('male', 'female'),\n        birthday: DATEONLY,\n        phone: STRING,\n        email: {\n          type: STRING,\n          allowNull: false,\n          unique: true,\n          validate: {\n            isEmail: true\n          }\n        },\n        password: VIRTUAL,\n        password_hash: STRING,\n        lastaccess: DATE,\n        role: {\n          type: STRING,\n          allowNull: false\n        },\n        status: {\n          type: STRING,\n          defaultValue: 'active'\n        }\n      },\n      { sequelize }\n    );\n\n    this.addHook('beforeSave', user => {\n      if (user.password) {\n        user.password_hash = encrypt(user.password);\n      }\n    });\n\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}