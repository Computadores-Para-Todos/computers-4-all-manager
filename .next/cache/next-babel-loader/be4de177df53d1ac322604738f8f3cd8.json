{"ast":null,"code":"import jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\n/**\n * Encripta valor para uso no banco de dados\n * @param {*} value valor a ser encriptado\n * @returns {string} valor encriptado\n * @todo usar metodo async\n */\n\nexport function encrypt(value) {\n  return bcrypt.hashSync(value, 10);\n}\n/**\n * Compara dois valores criptografados\n * @param {string} plain plain value\n * @param {string} hash  hash value\n * @returns {boolean} são iguais\n * @todo usar metodo async\n */\n\nexport function encryptCompare(plain, hash) {\n  return bcrypt.compareSync(plain, hash);\n}\n/**\n * Transforms an callback function to a promise, allowing use of async/await\n * @param {Function} fn function to transform\n * @returns {Function} transformed function\n */\n\nexport function promisefy(fn) {\n  return (...args) => new Promise((resolve, reject) => fn(...args, (err, data) => err ? reject(err) : resolve(data)));\n}\n/**\n * Transforma retorno da promise em tupla de sucesso e erro\n * @param {Promise} promise - Promise\n * @returns {[*, Error]} Dados\n */\n\nexport function cathPromise(promise) {\n  return promise.then(value => [value, null]).catch(error => [null, error]);\n}\nexport const jwtSign = promisefy(jwt.sign);\nexport const jwtVerify = promisefy(jwt.verify);","map":{"version":3,"sources":["/home/vinicius/code/computers-4-all-manager/api/src/utils.js"],"names":["jwt","bcrypt","encrypt","value","hashSync","encryptCompare","plain","hash","compareSync","promisefy","fn","args","Promise","resolve","reject","err","data","cathPromise","promise","then","catch","error","jwtSign","sign","jwtVerify","verify"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA;;;;;;;AAMA,OAAO,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAC7B,SAAOF,MAAM,CAACG,QAAP,CAAgBD,KAAhB,EAAuB,EAAvB,CAAP;AACD;AAED;;;;;;;;AAOA,OAAO,SAASE,cAAT,CAAwBC,KAAxB,EAA+BC,IAA/B,EAAqC;AAC1C,SAAON,MAAM,CAACO,WAAP,CAAmBF,KAAnB,EAA0BC,IAA1B,CAAP;AACD;AAED;;;;;;AAKA,OAAO,SAASE,SAAT,CAAmBC,EAAnB,EAAuB;AAC5B,SAAO,CAAC,GAAGC,IAAJ,KACL,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KACVJ,EAAE,CAAC,GAAGC,IAAJ,EAAU,CAACI,GAAD,EAAMC,IAAN,KAAgBD,GAAG,GAAGD,MAAM,CAACC,GAAD,CAAT,GAAiBF,OAAO,CAACG,IAAD,CAArD,CADJ,CADF;AAID;AAED;;;;;;AAKA,OAAO,SAASC,WAAT,CAAqBC,OAArB,EAA8B;AACnC,SAAOA,OAAO,CAACC,IAAR,CAAahB,KAAK,IAAI,CAACA,KAAD,EAAQ,IAAR,CAAtB,EAAqCiB,KAArC,CAA2CC,KAAK,IAAI,CAAC,IAAD,EAAOA,KAAP,CAApD,CAAP;AACD;AAED,OAAO,MAAMC,OAAO,GAAGb,SAAS,CAACT,GAAG,CAACuB,IAAL,CAAzB;AAEP,OAAO,MAAMC,SAAS,GAAGf,SAAS,CAACT,GAAG,CAACyB,MAAL,CAA3B","sourcesContent":["import jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\n\n/**\n * Encripta valor para uso no banco de dados\n * @param {*} value valor a ser encriptado\n * @returns {string} valor encriptado\n * @todo usar metodo async\n */\nexport function encrypt(value) {\n  return bcrypt.hashSync(value, 10);\n}\n\n/**\n * Compara dois valores criptografados\n * @param {string} plain plain value\n * @param {string} hash  hash value\n * @returns {boolean} são iguais\n * @todo usar metodo async\n */\nexport function encryptCompare(plain, hash) {\n  return bcrypt.compareSync(plain, hash);\n}\n\n/**\n * Transforms an callback function to a promise, allowing use of async/await\n * @param {Function} fn function to transform\n * @returns {Function} transformed function\n */\nexport function promisefy(fn) {\n  return (...args) =>\n    new Promise((resolve, reject) =>\n      fn(...args, (err, data) => (err ? reject(err) : resolve(data)))\n    );\n}\n\n/**\n * Transforma retorno da promise em tupla de sucesso e erro\n * @param {Promise} promise - Promise\n * @returns {[*, Error]} Dados\n */\nexport function cathPromise(promise) {\n  return promise.then(value => [value, null]).catch(error => [null, error]);\n}\n\nexport const jwtSign = promisefy(jwt.sign);\n\nexport const jwtVerify = promisefy(jwt.verify);\n"]},"metadata":{},"sourceType":"module"}