{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\n/**\n * @typedef {Function} ValueSetter - Função utilizada para atualizar um valor da lista de valores\n */\n\n/**\n * @typedef {Function} HandleSubmit - Função que deve ser utilizada no handleSubmit do form\n */\n\n/**\n * @typedef {[string]} ValueList - Lista de valores\n */\n\n/**\n * @typedef {[string]} ErrorList - Lista de erros de validação\n */\n\n/**\n * Hook para definir forms com estados e validação de campos através de um schema\n *\n * @param {Function} callback - Função que será chamada ao submeter o formulário com todos os dados válidos\n * @param {object} schema - Schema que validará o formulario.\n *\n * @returns {[ValueSetter, HandleSubmit, ValueList, ErrorList]} -\n */\n\nfunction useForm(callback, schema) {\n  const {\n    0: values,\n    1: setValues\n  } = useState({});\n  const {\n    0: errors,\n    1: setErrors\n  } = useState({});\n  const {\n    0: isSubmiting,\n    1: setIsSubmting\n  } = useState(false);\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmiting) {\n      setIsSubmting(false);\n      callback(values);\n    }\n  }, [errors, isSubmiting, callback, values]);\n\n  const validateSchema = values => {\n    let errors = {};\n\n    try {\n      schema.validateSync(values, {\n        abortEarly: false\n      });\n    } catch (err) {\n      errors = err.inner.reduce((acc, e) => _objectSpread(_objectSpread({}, acc), {}, {\n        [e.path]: e.message\n      }), errors);\n    }\n\n    return errors;\n  };\n\n  const handleSubmit = async event => {\n    if (event) event.preventDefault();\n    setErrors(await validateSchema(values, schema));\n    setIsSubmting(true);\n  };\n\n  const setValue = (name, value) => {\n    setValues(values => _objectSpread(_objectSpread({}, values), {}, {\n      [name]: value\n    }));\n  };\n\n  return [setValue, handleSubmit, values, errors];\n}\n\nexport default useForm;","map":{"version":3,"sources":["/home/vinicius/code/computers-4-all-manager/pwa/src/hooks/useForm.js"],"names":["useState","useEffect","useForm","callback","schema","values","setValues","errors","setErrors","isSubmiting","setIsSubmting","Object","keys","length","validateSchema","validateSync","abortEarly","err","inner","reduce","acc","e","path","message","handleSubmit","event","preventDefault","setValue","name","value"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA;;;;AAGA;;;;AAGA;;;;AAGA;;;;AAIA;;;;;;;;;AAQA,SAASC,OAAT,CAAiBC,QAAjB,EAA2BC,MAA3B,EAAmC;AACjC,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBN,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAA,OAACO,MAAD;AAAA,OAASC;AAAT,MAAsBR,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAA,OAACS,WAAD;AAAA,OAAcC;AAAd,MAA+BV,QAAQ,CAAC,KAAD,CAA7C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,MAAM,CAACC,IAAP,CAAYL,MAAZ,EAAoBM,MAApB,KAA+B,CAA/B,IAAoCJ,WAAxC,EAAqD;AACnDC,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAP,MAAAA,QAAQ,CAACE,MAAD,CAAR;AACD;AACF,GALQ,EAKN,CAACE,MAAD,EAASE,WAAT,EAAsBN,QAAtB,EAAgCE,MAAhC,CALM,CAAT;;AAOA,QAAMS,cAAc,GAAGT,MAAM,IAAI;AAC/B,QAAIE,MAAM,GAAG,EAAb;;AACA,QAAI;AACFH,MAAAA,MAAM,CAACW,YAAP,CAAoBV,MAApB,EAA4B;AAAEW,QAAAA,UAAU,EAAE;AAAd,OAA5B;AACD,KAFD,CAEE,OAAOC,GAAP,EAAY;AACZV,MAAAA,MAAM,GAAGU,GAAG,CAACC,KAAJ,CAAUC,MAAV,CACP,CAACC,GAAD,EAAMC,CAAN,qCACKD,GADL;AAEE,SAACC,CAAC,CAACC,IAAH,GAAUD,CAAC,CAACE;AAFd,QADO,EAKPhB,MALO,CAAT;AAOD;;AACD,WAAOA,MAAP;AACD,GAdD;;AAgBA,QAAMiB,YAAY,GAAG,MAAMC,KAAN,IAAe;AAClC,QAAIA,KAAJ,EAAWA,KAAK,CAACC,cAAN;AACXlB,IAAAA,SAAS,CAAC,MAAMM,cAAc,CAACT,MAAD,EAASD,MAAT,CAArB,CAAT;AACAM,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD,GAJD;;AAMA,QAAMiB,QAAQ,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAChCvB,IAAAA,SAAS,CAACD,MAAM,oCAAUA,MAAV;AAAkB,OAACuB,IAAD,GAAQC;AAA1B,MAAP,CAAT;AACD,GAFD;;AAIA,SAAO,CAACF,QAAD,EAAWH,YAAX,EAAyBnB,MAAzB,EAAiCE,MAAjC,CAAP;AACD;;AAED,eAAeL,OAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\n/**\n * @typedef {Function} ValueSetter - Função utilizada para atualizar um valor da lista de valores\n */\n/**\n * @typedef {Function} HandleSubmit - Função que deve ser utilizada no handleSubmit do form\n */\n/**\n * @typedef {[string]} ValueList - Lista de valores\n */\n/**\n * @typedef {[string]} ErrorList - Lista de erros de validação\n */\n\n/**\n * Hook para definir forms com estados e validação de campos através de um schema\n *\n * @param {Function} callback - Função que será chamada ao submeter o formulário com todos os dados válidos\n * @param {object} schema - Schema que validará o formulario.\n *\n * @returns {[ValueSetter, HandleSubmit, ValueList, ErrorList]} -\n */\nfunction useForm(callback, schema) {\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [isSubmiting, setIsSubmting] = useState(false);\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmiting) {\n      setIsSubmting(false);\n      callback(values);\n    }\n  }, [errors, isSubmiting, callback, values]);\n\n  const validateSchema = values => {\n    let errors = {};\n    try {\n      schema.validateSync(values, { abortEarly: false });\n    } catch (err) {\n      errors = err.inner.reduce(\n        (acc, e) => ({\n          ...acc,\n          [e.path]: e.message\n        }),\n        errors\n      );\n    }\n    return errors;\n  };\n\n  const handleSubmit = async event => {\n    if (event) event.preventDefault();\n    setErrors(await validateSchema(values, schema));\n    setIsSubmting(true);\n  };\n\n  const setValue = (name, value) => {\n    setValues(values => ({ ...values, [name]: value }));\n  };\n\n  return [setValue, handleSubmit, values, errors];\n}\n\nexport default useForm;\n"]},"metadata":{},"sourceType":"module"}