{"ast":null,"code":"import { User } from \"../../../api/src/models\";\nimport { encryptCompare, jwtSign } from \"../../../api/src/utils\";\nconst {\n  JWT_SECRET = 'c4all'\n} = process.env;\nexport default (async (req, res) => {\n  if (req.body) {\n    const {\n      email,\n      password\n    } = req.body;\n    const user = await User.findOne({\n      where: {\n        email: email\n      }\n    });\n\n    if (!user || !encryptCompare(password, user.password_hash)) {\n      res.statusCode = 401;\n      res.end({\n        error: \"login\"\n      });\n    }\n\n    const token = await jwtSign(user.toJSON(), JWT_SECRET);\n    res.end({\n      user: {\n        email,\n        role: user.role\n      },\n      token\n    });\n  }\n});","map":{"version":3,"sources":["/home/vinicius/code/computers-4-all-manager/pages/api/users/login.js"],"names":["User","encryptCompare","jwtSign","JWT_SECRET","process","env","req","res","body","email","password","user","findOne","where","password_hash","statusCode","end","error","token","toJSON","role"],"mappings":"AAAA,SAASA,IAAT,QAAqB,yBAArB;AACA,SAASC,cAAT,EAAyBC,OAAzB,QAAwC,wBAAxC;AACA,MAAM;AAAEC,EAAAA,UAAU,GAAG;AAAf,IAA2BC,OAAO,CAACC,GAAzC;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,MAAGD,GAAG,CAACE,IAAP,EAAY;AACV,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBJ,GAAG,CAACE,IAAhC;AACA,UAAMG,IAAI,GAAG,MAAMX,IAAI,CAACY,OAAL,CAAa;AAAEC,MAAAA,KAAK,EAAE;AAAEJ,QAAAA,KAAK,EAAEA;AAAT;AAAT,KAAb,CAAnB;;AACA,QAAI,CAACE,IAAD,IAAS,CAACV,cAAc,CAACS,QAAD,EAAWC,IAAI,CAACG,aAAhB,CAA5B,EAA2D;AACzDP,MAAAA,GAAG,CAACQ,UAAJ,GAAiB,GAAjB;AACAR,MAAAA,GAAG,CAACS,GAAJ,CAAQ;AAACC,QAAAA,KAAK,EAAE;AAAR,OAAR;AACD;;AACD,UAAMC,KAAK,GAAG,MAAMhB,OAAO,CAACS,IAAI,CAACQ,MAAL,EAAD,EAAgBhB,UAAhB,CAA3B;AAEAI,IAAAA,GAAG,CAACS,GAAJ,CAAQ;AACNL,MAAAA,IAAI,EAAE;AAAEF,QAAAA,KAAF;AAASW,QAAAA,IAAI,EAAET,IAAI,CAACS;AAApB,OADA;AAENF,MAAAA;AAFM,KAAR;AAID;AACF,CAfD","sourcesContent":["import { User } from \"../../../api/src/models\";\nimport { encryptCompare, jwtSign } from \"../../../api/src/utils\";\nconst { JWT_SECRET = 'c4all' } = process.env;\n\nexport default async (req, res) => {\n  if(req.body){\n    const { email, password } = req.body\n    const user = await User.findOne({ where: { email: email } });\n    if (!user || !encryptCompare(password, user.password_hash)){\n      res.statusCode = 401;\n      res.end({error: \"login\"})\n    }\n    const token = await jwtSign(user.toJSON(), JWT_SECRET);\n\n    res.end({\n      user: { email, role: user.role },\n      token\n    });\n  }\n}"]},"metadata":{},"sourceType":"module"}