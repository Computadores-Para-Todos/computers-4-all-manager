{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from 'react';\n/**\n * @typedef {Function} ValueSetter - Função utilizada para atualizar um valor da lista de valores\n */\n\n/**\n * @typedef {Function} HandleSubmit - Função que deve ser utilizada no handleSubmit do form\n */\n\n/**\n * @typedef {[string]} ValueList - Lista de valores\n */\n\n/**\n * @typedef {[string]} ErrorList - Lista de erros de validação\n */\n\n/**\n * Hook para definir forms com estados e validação de campos através de um schema\n *\n * @param {Function} callback - Função que será chamada ao submeter o formulário com todos os dados válidos\n * @param {object} schema - Schema que validará o formulario.\n *\n * @returns {[ValueSetter, HandleSubmit, ValueList, ErrorList]} -\n */\n\nfunction useForm(callback, schema) {\n  _s();\n\n  var _useState = useState({}),\n      values = _useState[0],\n      setValues = _useState[1];\n\n  var _useState2 = useState({}),\n      errors = _useState2[0],\n      setErrors = _useState2[1];\n\n  var _useState3 = useState(false),\n      isSubmiting = _useState3[0],\n      setIsSubmting = _useState3[1];\n\n  useEffect(function () {\n    if (Object.keys(errors).length === 0 && isSubmiting) {\n      setIsSubmting(false);\n      callback(values);\n    }\n  }, [errors, isSubmiting, callback, values]);\n\n  var validateSchema = function validateSchema(values) {\n    var errors = {};\n\n    try {\n      schema.validateSync(values, {\n        abortEarly: false\n      });\n    } catch (err) {\n      errors = err.inner.reduce(function (acc, e) {\n        return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, e.path, e.message));\n      }, errors);\n    }\n\n    return errors;\n  };\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (event) event.preventDefault();\n              _context.t0 = setErrors;\n              _context.next = 4;\n              return validateSchema(values, schema);\n\n            case 4:\n              _context.t1 = _context.sent;\n              (0, _context.t0)(_context.t1);\n              setIsSubmting(true);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var setValue = function setValue(name, value) {\n    setValues(function (values) {\n      return _objectSpread(_objectSpread({}, values), {}, _defineProperty({}, name, value));\n    });\n  };\n\n  return [setValue, handleSubmit, values, errors];\n}\n\n_s(useForm, \"kEpOpcFTMXNBYnueZN2deM3qzsI=\");\n\nexport default useForm;","map":{"version":3,"sources":["/home/vinicius/code/computers-4-all-manager/pwa/src/hooks/useForm.js"],"names":["useState","useEffect","useForm","callback","schema","values","setValues","errors","setErrors","isSubmiting","setIsSubmting","Object","keys","length","validateSchema","validateSync","abortEarly","err","inner","reduce","acc","e","path","message","handleSubmit","event","preventDefault","setValue","name","value"],"mappings":";;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA;;;;AAGA;;;;AAGA;;;;AAGA;;;;AAIA;;;;;;;;;AAQA,SAASC,OAAT,CAAiBC,QAAjB,EAA2BC,MAA3B,EAAmC;AAAA;;AAAA,kBACLJ,QAAQ,CAAC,EAAD,CADH;AAAA,MAC1BK,MAD0B;AAAA,MAClBC,SADkB;;AAAA,mBAELN,QAAQ,CAAC,EAAD,CAFH;AAAA,MAE1BO,MAF0B;AAAA,MAElBC,SAFkB;;AAAA,mBAGIR,QAAQ,CAAC,KAAD,CAHZ;AAAA,MAG1BS,WAH0B;AAAA,MAGbC,aAHa;;AAKjCT,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIU,MAAM,CAACC,IAAP,CAAYL,MAAZ,EAAoBM,MAApB,KAA+B,CAA/B,IAAoCJ,WAAxC,EAAqD;AACnDC,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAP,MAAAA,QAAQ,CAACE,MAAD,CAAR;AACD;AACF,GALQ,EAKN,CAACE,MAAD,EAASE,WAAT,EAAsBN,QAAtB,EAAgCE,MAAhC,CALM,CAAT;;AAOA,MAAMS,cAAc,GAAG,SAAjBA,cAAiB,CAAAT,MAAM,EAAI;AAC/B,QAAIE,MAAM,GAAG,EAAb;;AACA,QAAI;AACFH,MAAAA,MAAM,CAACW,YAAP,CAAoBV,MAApB,EAA4B;AAAEW,QAAAA,UAAU,EAAE;AAAd,OAA5B;AACD,KAFD,CAEE,OAAOC,GAAP,EAAY;AACZV,MAAAA,MAAM,GAAGU,GAAG,CAACC,KAAJ,CAAUC,MAAV,CACP,UAACC,GAAD,EAAMC,CAAN;AAAA,+CACKD,GADL,2BAEGC,CAAC,CAACC,IAFL,EAEYD,CAAC,CAACE,OAFd;AAAA,OADO,EAKPhB,MALO,CAAT;AAOD;;AACD,WAAOA,MAAP;AACD,GAdD;;AAgBA,MAAMiB,YAAY;AAAA,wEAAG,iBAAMC,KAAN;AAAA;AAAA;AAAA;AAAA;AACnB,kBAAIA,KAAJ,EAAWA,KAAK,CAACC,cAAN;AADQ,4BAEnBlB,SAFmB;AAAA;AAAA,qBAEHM,cAAc,CAACT,MAAD,EAASD,MAAT,CAFX;;AAAA;AAAA;AAAA;AAGnBM,cAAAA,aAAa,CAAC,IAAD,CAAb;;AAHmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZc,YAAY;AAAA;AAAA;AAAA,KAAlB;;AAMA,MAAMG,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD,EAAOC,KAAP,EAAiB;AAChCvB,IAAAA,SAAS,CAAC,UAAAD,MAAM;AAAA,6CAAUA,MAAV,2BAAmBuB,IAAnB,EAA0BC,KAA1B;AAAA,KAAP,CAAT;AACD,GAFD;;AAIA,SAAO,CAACF,QAAD,EAAWH,YAAX,EAAyBnB,MAAzB,EAAiCE,MAAjC,CAAP;AACD;;GAvCQL,O;;AAyCT,eAAeA,OAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\n/**\n * @typedef {Function} ValueSetter - Função utilizada para atualizar um valor da lista de valores\n */\n/**\n * @typedef {Function} HandleSubmit - Função que deve ser utilizada no handleSubmit do form\n */\n/**\n * @typedef {[string]} ValueList - Lista de valores\n */\n/**\n * @typedef {[string]} ErrorList - Lista de erros de validação\n */\n\n/**\n * Hook para definir forms com estados e validação de campos através de um schema\n *\n * @param {Function} callback - Função que será chamada ao submeter o formulário com todos os dados válidos\n * @param {object} schema - Schema que validará o formulario.\n *\n * @returns {[ValueSetter, HandleSubmit, ValueList, ErrorList]} -\n */\nfunction useForm(callback, schema) {\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [isSubmiting, setIsSubmting] = useState(false);\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmiting) {\n      setIsSubmting(false);\n      callback(values);\n    }\n  }, [errors, isSubmiting, callback, values]);\n\n  const validateSchema = values => {\n    let errors = {};\n    try {\n      schema.validateSync(values, { abortEarly: false });\n    } catch (err) {\n      errors = err.inner.reduce(\n        (acc, e) => ({\n          ...acc,\n          [e.path]: e.message\n        }),\n        errors\n      );\n    }\n    return errors;\n  };\n\n  const handleSubmit = async event => {\n    if (event) event.preventDefault();\n    setErrors(await validateSchema(values, schema));\n    setIsSubmting(true);\n  };\n\n  const setValue = (name, value) => {\n    setValues(values => ({ ...values, [name]: value }));\n  };\n\n  return [setValue, handleSubmit, values, errors];\n}\n\nexport default useForm;\n"]},"metadata":{},"sourceType":"module"}