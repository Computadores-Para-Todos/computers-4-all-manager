{"version":3,"sources":["logo.svg","logger.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","rollbar","Rollbar","logger","setup","accessToken","configure","captureUncaught","captureUnhandledRejections","log","value","extra","info","critical","error","console","process","App","useEffect","className","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,kC,yLCGrCC,EAAU,I,OAAIC,GAAQ,IAyBbC,EAvBA,CAEbC,MAAO,SAAAC,GACLJ,EAAQK,UAAU,CAChBD,YAAaA,EACbE,iBAAiB,EACjBC,4BAA4B,KAGhCC,IAAK,SAACC,EAAOC,GACXV,EAAQQ,IAAIC,EAAOC,IAErBC,KAAM,SAACF,EAAOC,GACZV,EAAQW,KAAKF,EAAOC,IAEtBE,SAAU,SAACH,EAAOC,GAChBV,EAAQY,SAASH,EAAOC,IAE1BG,MAAO,SAACJ,EAAOC,GACbV,EAAQa,MAAMJ,EAAOC,KCnBzBI,QAAQN,IAAI,OAAQO,qIA+BLC,MAzBf,WAUE,OATAC,qBAAU,WAGNf,EAAOC,MAAMY,uCAOf,yBAAKG,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,uBAAGH,UAAU,WAAWI,KAAK,sBAAsBC,OAAO,SAASC,IAAI,uBAAvE,kBChBYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.aac3b81e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import Rollbar from 'rollbar';\n\n// Inicializar Rollbar sem configurações\nconst rollbar = new Rollbar({});\n\nconst logger = {\n  // Configurar rollbar\n  setup: accessToken => {\n    rollbar.configure({\n      accessToken: accessToken,\n      captureUncaught: true,\n      captureUnhandledRejections: true\n    });\n  },\n  log: (value, extra) => {\n    rollbar.log(value, extra);\n  },\n  info: (value, extra) => {\n    rollbar.info(value, extra);\n  },\n  critical: (value, extra) => {\n    rollbar.critical(value, extra);\n  },\n  error: (value, extra) => {\n    rollbar.error(value, extra);\n  }\n};\n\nexport default logger;\n","import React, { useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport logger from './logger';\n\nconsole.log('.env', process.env);\n\n/**\n * Main App call\n * @returns {React} App rendered\n */\nfunction App() {\n  useEffect(() => {\n    // Setup logging with Rollbar\n    if (process.env.REACT_APP_ROLLBAR_TOKEN) {\n      logger.setup(process.env.REACT_APP_ROLLBAR_TOKEN);\n      // logger.info(\"I'm alive\");\n      // throw new Error(\"Test error\");\n    }\n  });\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\n/**\n * Register service worker\n * @param {object} config - SW definition\n * @returns {void}\n */\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\n/**\n * Register service worker\n * @param {string} swUrl - SW url\n * @param {object} config - SW definition\n * @returns {void}\n */\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\n/**\n * Check for valid service worker\n * @param {string} swUrl - SW url\n * @param {object} config - SW definition\n * @returns {void}\n */\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n/**\n * Unregister service worker\n * @returns {void}\n */\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}